# -*- coding: utf-8 -*-
"""classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L7mAn6AJilUpaMPwqo6WlVtOscGnhXbG
"""

import pandas as pd

url = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv'
df = pd.read_csv(url)

df.head()

df['species'].value_counts() #counts how many of each species of flower (50 of each)

#logistic regression
X = df.drop('species', 1) #set of diff columns (data matrix/feature matrix)
y = df.species #label vector

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.2, random_state = 10) #split into testing data and training data
#click on the {x} to see the results

#logisitc regression
from sklearn.linear_model import LogisticRegression

logreg = LogisticRegression(random_state=10) #object of LinearRegression (random state is a random way of splitting people starting at the seed 10)

logreg.fit(X_train, y_train)

y_pred = logreg.predict(X_test) #predicts values

from sklearn import metrics

cnf_matrix = metrics.confusion_matrix(y_test, y_pred)

cnf_matrix

print("Accuracy:", metrics.accuracy_score(y_pred,y_test))

import plotly
import plotly.express as px

fig = px.scatter_3d(df[["sepal_length", "sepal_width", "petal_length", "petal_width", "species"]],
  x = 'sepal_length',
  y='sepal_length',
  z='petal_width',
  size='petal_length',
  color='species',
  opacity=0.7
                    )

fig.update_layout(margin=dict(l=0, r=0, b=0, t=0))

#k means clustering
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

kmeans = KMeans(n_clusters = 3) #specify the number of clsuters as 3
kmeans.fit(X)

labels = kmeans.labels_
centroids = kmeans.cluster_centers_ #the centroids are the the centers of the optimals clusters

plt.scatter(X.iloc[:,0], X.iloc[:,1], c=labels, cmap ="viridis")
plt.scatter(centroids[:,0], centroids[:,1], s= 300, c= "red", marker = "x") #the red X marks the centroids
#the machine learning is happening in 4-d, when we plot it 2-d, therefore some info is lost, which is why some green dots are in the yellow clusters etc.